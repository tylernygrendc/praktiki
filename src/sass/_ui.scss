@use "sass:color";

// BREAKPOINTS

@mixin compactViewport {
  @media (max-width: 599px) {
    @content;
  }
}

@mixin mediumViewport {
  @media (min-width: 600px) and (max-width: 839px) {
    @content;
  }
}

@mixin expandedViewport {
  @media (min-width: 840px) {
    @content;
  }
}

// FONTS

@font-face {
  font-family: "Open Sans";
  src: url(/font/OpenSans.ttf);
}

@font-face {
  font-family: "Roboto";
  src: url(/font/RobotoFlex.ttf);
}

@font-face {
  font-family: "Material Symbols";
  src: url(/font/MaterialSymbolsRounded.woff2);
}

// ICONS

@mixin icon($size: 1em, $weight: 300) {
  display: inline-block !important;
  font-family: "Material Symbols" !important;
  font-size: $size;
  font-variation-settings: "wght" $weight;
  font-style: normal !important;
  font-stretch: normal !important;
  font-optical-sizing: auto !important;
  text-decoration: none !important;
  text-transform: none !important;
  text-shadow: none;
  letter-spacing: 0;
  line-height: 1;
}

// THEME

@function onColor($key, $color: false) {
  @if ($color) {
    @if color.lightness($key) < 50 {
      @return color.scale($key, $saturation: 80%, $lightness: 90%);
    } @else {
      @return color.scale($key, $saturation: 80%, $lightness: -90%);
    }
  } @else {
    @if color.lightness($key) < 50 {
      @return #ffffff;
    } @else {
      @return #000000;
    }
  }
}

@mixin colorScheme($dark: false) {
  // key
  $background: hsl(0, 0%, 86%);
  $surface: hsl(0, 0%, 96%);
  $containerLayerVariation: -1;
  $primary: hsl(200, 40%, 40%);
  $secondary: color.adjust($primary, $hue: -25deg);
  $tertiary: color.adjust($primary, $hue: 25deg);
  $error: hsl(0, 40%, 50%);
  $success: hsl(150, 40%, 40%);

  @if ($dark) {
    $background: hsl(0, 0%, 7%);
    $surface: hsl(0, 0%, 14%);
  }

  // containers
  $surfaceContainer--highest: color.scale(
    $surface,
    $lightness: -8%
  );
  $surfaceContainer--high: color.scale(
    $surface,
    $lightness: -6%
  );
  $surfaceContainer--low: color.scale(
    $surface,
    $lightness: -4%
  );
  $surfaceContainer--lowest: color.scale(
    $surface,
    $lightness: -2%
  );
  $primaryContainer: color.scale(
    $primary,
    $saturation: -10%,
    $lightness: 50%
  );
  $secondaryContainer: color.scale(
    $secondary,
    $saturation: -10%,
    $lightness: 50%
  );
  $tertiaryContainer: color.scale(
    $tertiary,
    $saturation: -10%,
    $lightness: 50%
  );
  $errorContainer: color.scale(
    $error,
    $saturation: -10%,
    $lightness: 50%
  );
  $successContainer: color.scale(
    $success,
    $saturation: -10%,
    $lightness: 50%
  );

  $onSurface: onColor($surface);
  $onPrimary: onColor($primary, $color: true);
  $onPrimaryContainer: onColor($primaryContainer, $color: true);
  $onSecondary: onColor($secondary, $color: true);
  $onSecondaryContainer: onColor($secondaryContainer, $color: true);
  $onTertiary: onColor($tertiary, $color: true);
  $onTertiaryContainer: onColor($tertiary, $color: true);
  $onError: onColor($error, $color: true);
  $onErrorContainer: onColor($errorContainer, $color: true);
  $onSuccess: onColor($error, $color: true);
  $onSuccessContainer: onColor($errorContainer, $color: true);

  // CSS Variables
  --background: #{$background};
  --surface: #{$surface};
  --on-surface: #{$onSurface};
  --surface-container--highest: #{$surfaceContainer--highest};
  --surface-container--high: #{$surfaceContainer--high};
  --surface-container--low: #{$surfaceContainer--low};
  --surface-container--lowest: #{$surfaceContainer--lowest};
  --primary: #{$primary};
  --primary-container: #{$primaryContainer};
  --on-primary: #{$onPrimary};
  --on-primary-container: #{$onPrimaryContainer};
  --secondary: #{$secondary};
  --secondary-container: #{$secondaryContainer};
  --on-secondary: #{$onSecondary};
  --on-secondary-container: #{$onSecondaryContainer};
  --tertiary: #{$tertiary};
  --tertiary-container: #{$tertiaryContainer};
  --on-tertiary: #{$onTertiary};
  --on-tertiary-container: #{$onTertiaryContainer};
  --error: #{$error};
  --error-container: #{$errorContainer};
  --on-error: #{$onError};
  --on-error-container: #{$onErrorContainer};
  --success: #{$success};
  --success-container: #{$successContainer};
  --on-success: #{$onSuccess};
  --on-success-container: #{$onSuccessContainer};
}

:root {
  @include colorScheme;
}

@media (prefers-color-scheme: dark) {
  :root {
    @include colorScheme($dark: true);
  }
}

.color-scheme {
  &--light {
    @include colorScheme;
  }
  &--dark {
    @include colorScheme($dark: true);
  }
}

// DEFAULT

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  width: 100svw;
  height: 100svh;
  overflow: hidden;
  scroll-behavior: smooth;
  background-color: var(--background);
  color: var(--on-background);
  font-family: sans-serif;
}

img,
svg,
video {
  display: block;
  object-fit: cover;
  object-position: center;
  max-width: 100%;
}

details {
  summary {
    display: flex;
    flex-direction: row;
    align-items: center;
    position: relative;

    &::after {
      @include icon(1.5em);
      content: "keyboard_arrow_down";
      position: absolute;
      inset: 50% 0 auto auto;
      translate: 0 -50%;
      padding: 0 0.25em;
    }
  }
  &[open] summary::after {
    transform: rotate(180deg);
  }
}

// SHOW/HIDE

$speed: 250ms;

.hide,
.hidden,
.invisible {
  transition: $speed;
  opacity: 0%;
  visibility: hidden !important;
}

.show,
.shown,
.visible {
  transition: $speed;
  opacity: 100%;
  visibility: visible !important;
}

.vanish,
.vanished {
  transition: $speed;
  opacity: 0%;
  display: none !important;
}

.appear,
.appeared {
  transition: $speed;
  opacity: 100%;
}

// hide block, keep visible to screen readers

@mixin accessibleHideFromView {
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  height: 1px;
  width: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
}

.accessibleHideFromView {
  @include accessibleHideFromView;
}

// ELEVATION

// an elevated button's resting state is level 2
// an elevated button's hover state is level 4

@mixin elevation($focused: false) {
  $level: 2;
  @if ($focused) {
    $level: 4;
  }
  box-shadow: 0 #{$level * 1px} #{$level * 3px} hsl(0 0% 0% / 0.12),
    0 #{$level * 1px} #{$level * 1px} hsl(0 0% 0% / 0.24);
}

// SCROLLBAR

::-webkit-scrollbar {
  width: minmax(8px, 0.5rem);
  height: minmax(8px, 0.5rem);
  &-thumb {
    border: minmax(2px, 0.125rem) solid hsl(0 0% 0% / 0);
    border-radius: 100vw;
    background-color: var(--on-secondary-container);
  }
  &-track {
    margin-block: 0.25rem;
    border-radius: 100vw;
    background-color: (--secondary-container);
  }
  &-button,
  &-corner,
  &-resize {
    display: none;
  }
}

@supports (scrollbar-width: auto) {
  * {
    scrollbar-width: thin;
    scrollbar-color: var(--on-secondary-container) var(--secondary-container);
  }
}

// BUTTONS

/*

Button Types:
  - Elevated
  - Filled
  - Tonal
  - Outlined
  - Text

Usage:

  <button class="btn btn--outlined">
    <div class="btn__state"></div>
    <div class="btn__icon">download</div>
    <div class="btn__label">Download</div>
  </button>

*/

.btn {
  position: relative;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  padding: 0.625rem 1.5rem;
  gap: 0.5rem;
  border-radius: 20px;
  overflow: hidden;
  font-size: 1rem;
  cursor: pointer;

  &:has(&__icon) {
    padding: 0.625rem 1.5rem 0.625rem 1rem;
  }

  &__state {
    position: absolute;
    inset: 0;
    transition: 250ms;
    opacity: 0%;
  }

  &__icon {
    @include icon(1.125rem, 300);
  }

  &__label {
    font-family: "Roboto", sans-serif;
    font-size: 1rem;
    font-weight: 300;
    font-optical-sizing: auto;
  }

  &:disabled {
    opacity: 38%;
    cursor: not-allowed;
  }

  &:hover &__state {
      transition: 250ms;
      opacity: 8%;
  }

  &:focus-visible &_state{
    transition: 250ms;
    opacity: 10%;
  }

  &--elevated {
    background-color: var(--primary-container);
    color: var(--on-primary-container);
    @include elevation;
    &:focus-visible {
      transition: 250ms;
      @include elevation($focused: true);
    }
    .btn__state {
      background-color: var(--on-primary-container);
    }
  }

  &--filled {
    background-color: var(--primary);
    color: var(--on-primary);
    .btn__state {
      background-color: var(--on-primary);
    }
  }

  &--tonal {
    background-color: var(--primary-container);
    color: var(--on-primary-container);
    .btn__state {
      background-color: var(--on-primary-container);
    }
  }

  &--outlined {
    background-color: var(--surface);
    color: var(--on-surface);
    border: 0.125rem solid var(--on-surface);
    .btn__state {
      background-color: var(--surface-container--high);
    }
  }

  &--text {
    background-color: var(--surface);
    color: var(--on-surface);
    .btn__state {
      background-color: var(--surface-container--high);
    }
  }
}

// CHIPS

.chip {
  position: relative;
  overflow: hidden;
  display: flex;
  flex-direction: row;
  align-items: center;
  padding: 0.375rem 1rem;
  gap: 1ch;
  border: 0.125rem solid var(--on-surface);
  border-radius: 20px;
  background-color: var(--surface);
  color: var(--on-surface);
  font-size: 1rem;
  cursor: pointer;

  &__state {
    position: absolute;
    inset: 0;
    transition: 250ms;
    opacity: 0%;
    background-color: var(--surface-container--high);
  }

  &__icon {
    @include icon(1.125rem, 200);
  }

  &__label {
    font-family: "Roboto", sans-serif;
    font-size: 1rem;
    font-weight: 200;
    font-optical-sizing: auto;
  }

  &:has(&__icon) {
    padding: 0.375rem 1rem 0.375rem 0.5rem;
  }

  &:disabled {
    opacity: 38%;
    cursor: not-allowed;
  }

  &:hover &__state {
      transition: 250ms;
      opacity: 8%;
  }

  &:focus-visible &__state {
      transition: 250ms;
      opacity: 10%;
  }
}

dialog {
  position: fixed;
  inset: 50% auto auto 50%;
  translate: -50% -50%;
  width: 35rem;
  min-width: 17.5rem;
  max-width: 95vw;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 1.5rem;
  gap: 1rem;
  border: 0 solid;
  border-radius: 1.75rem;
  background-color: var(--surface-container--high);

  &__title{
    width: 100%;
    margin-bottom: 1.5rem;
    font-family: "Open Sans";
    font-weight: 200;
    font-optical-sizing: auto;
    font-size: 1.15rem;
    color: var(--on-surface);
  }
  &__text{
    font-family: "Roboto";
    font-weight: 200;
    font-optical-sizing: auto;
    font-size: 1rem;
    color: var(--on-surface);
  }
  &__actions{
    display: flex;
    flex-direction: row;
    align-items: center;
  }
  &::backdrop{
    background-color: hsl(0 0 0 / 25%);
  }
}

.list {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: start;

  &_item {

    display: flex;
    flex-direction: row;
    align-items: center;
    padding: 0.5rem;

    &__icon{
      @include icon;
    }
    &__image{
      height: 100%;
      aspect-ratio: 1/1;
      object-fit: contain;
      object-position: center;
      border-radius: 1.5rem;
    }
    &__text {
      display: flex;
      flex: 1;
      flex-direction: column;
      align-items: start;  
      &:first-child{
        
      }
    }
  }

  &_option {
    position: relative;
    height: 2.5rem;
    width: 100%;

    &:has(:disabled) {
      opacity: 38%;
      cursor: not-allowed;
    }

    &__icon {
      @include icon(1rem, 200);
      position: absolute;
      inset: 50% auto auto 1.25rem;
      translate: -50% -50%;
      width: 1.125rem;
      height: 1.125rem;
      accent-color: var(--primary);
      z-index: 1;
    }

    &__state {
      position: absolute;
      inset: 0 auto auto 0;
      width: 2.5rem;
      height: 2.5rem;
      border: solid 0px;
      border-radius: 100%;
      z-index: 0;
      background-color: var(--primary);
      transition: 250ms;
      opacity: 0%;
      &:hover {
        transition: 250ms;
        opacity: 8%;
      }
      &:focus-visible {
        transition: 250ms;
        opacity: 10%;
      }
    }

    &__label {
      position: absolute;
      inset: 50% 0 auto 3em;
      translate: 0 -50%;
      font-family: "Roboto", sans-serif;
      font-size: 1rem;
      font-weight: 200;
      font-optical-sizing: auto;
    }
  }
}

.text-field{
  position: relative;
  z-index: 0;
  margin: 0.25rem 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 1rem;
  gap: 1rem;
  border: 0.125rem solid var(--on-surface);
  border-radius: 0.25rem;
  background-color: inherit;
  font-family: "Roboto", sans-serif;
  font-weight: 200;
  font-optical-sizing: auto;
  color: var(--on-surface);
  cursor: text;
  &:has(&__hint){
    margin-bottom: 1.25rem;
  }
  &--error {
    border-color: var(--error);
    color: var(--error);
  }
  &--success {
    border-color: var(--success);
    color: var(--success);
  }
  &__label{
    position: absolute;
    z-index: 1;
    inset: 0 auto auto 0.5rem;
    translate: 0% -50%;
    padding: 0.25rem;
    font-size: 0.8rem;
    background-color: inherit;
  }
  &__icon{
    @include icon($size: 1rem, $weight: 200);
  }
  &__input{
    flex: 1;
    border-width: 0;
    border-radius: 0;
    background-color: transparent;
    font-size: 1rem;
    resize: none;
    &:focus{
      outline: 0;
    }
  }
  &__hint{
    position: absolute;
    inset: auto 0 -0.25rem 0;
    transform: 0 -100%;
    font-size: 0.8rem;
  }
  &:hover{
    outline: 0.175rem solid var(--on-surface);
  }
  &:focus-within{
    outline: 0.175rem solid var(--primary);
    .text-field__label{
      color: var(--primary);
    }
    .text-filed__input {
      caret-color: var(--primary);
    }
  }
}
